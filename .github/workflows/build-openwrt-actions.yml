name: Build-OpenWrt

on:
  workflow_dispatch:
  push:
    branches:
      - xfl_dev
#  release:
#    types: published
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started
#  repository_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    #    timeout-minutes: 360

    steps:
      - name: Clone Repository
        uses: actions/checkout@v3
      - name: Init Compilation Dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt-get -qq remove --purge azure-cli ghc zulu* llvm* firefox google* dotnet* powershell mysql* php* mssql-tools msodbcsql17 android*
          sudo -E apt-get -qq update
          sudo -E apt-get -qq full-upgrade
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-setuptools python3-pip python3-ply python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev coreutils libz-dev lib32gcc1 upx  ecj re2c xz-utils tar
          for i in $(ls /usr/bin/*-8); do sudo -E ln -sf $i ${i%%-8*}; done
          sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E swapoff -a
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc /swapfile
      - name: Clone Source
        run: |
          cd /home/runner
          bash ${GITHUB_WORKSPACE}/clone_source.sh
          sudo chown -R runner:runner immortalwrt
      - name: Before Build
        run: |
          /bin/bash ${GITHUB_WORKSPACE}/before_build.sh
          cp -fpR ${GITHUB_WORKSPACE}/. /home/runner/immortalwrt/

      - name: Start Build
        run: |
          cd /home/runner/immortalwrt
          mv .config_immortalwrt .config
          rm -f .config.old
          make defconfig; make -j$[$(nproc)+1]; rm -rf build_dir/target* build_dir/toolchain* staging_dir/target* staging_dir/toolchain*
      - name: After Build
        run: |
          /bin/bash /home/runner/immortalwrt/after_build.sh
      - name: Upload Packages
        uses: actions/upload-artifact@v3
        with:
          name: Packages
          path: /home/runner/immortalwrt/bin/packages/
      - name: Upload Firmwares
        uses: actions/upload-artifact@v3
        with:
          name: Firmwares
          path: /home/runner/immortalwrt/bin/targets/